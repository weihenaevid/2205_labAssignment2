package LA2Q2;

import java.util.Collections;
import java.util.Vector;

public class ViduniDivija_SortNameAndGrade extends StudentGrade{
    public static void header() {
        System.out.println("*******************************************************\n" +
                "Names: Divija and Viduni.\n" +
                "Student Numbers: 251159008 and 251152022\n" +
                "Goal of this project: Create a StudentClass type class and sort a list populated with " +
                "certain student and their corresponding grades based on either their " +
                " last name, first name or the grade.\n" +
                "*******************************************************");
    }
    public static void footer(){
        System.out.println("*******************************************************\n" +
                "This is " + java.time.LocalTime.now() + " on the " + java.time.LocalDate.now() +"\n"+
                "Completion of Lab Assignment 2 is successful!\n" +
                "Good bye! Divija Bhargava and Viduni Weihena Epa \n" +
                "*******************************************************\n");
    }

    public static void main(String[] args) {

        //call your header method
        header();

        //declare given arrays
        String[] fnArray = {"Hermione", "Ron", "Harry", "Luna", "Ginny", "Draco", "Dean", "Fred"};
        String[] lnArray = {"Granger", "Weasley", "Potter", "Lovegood", "Weasley", "Malfoy", "Thomas", "Weasley"};
        Integer[] grd = {(int) (60 + Math.random() * 26), (int) (60 +
                Math.random() * 26), (int) (60 + Math.random() * 26), (int) (60 +
                Math.random() * 26), (int) (60 + Math.random() * 26), (int) (60 +
                Math.random() * 26), (int) (60 + Math.random() * 26), (int) (60 +
                Math.random() * 26)};

        //create a Vector<> class instance sg with StudentGrade tag.
        Vector<StudentGrade> sg = new Vector<>();


        //Add each StudentGrade object to the Vector class with its add method (Slide #36, Unit 2 Part 2)
        for(int i =0; i < grd.length;i++) {
            sg.add(new StudentGrade(fnArray[i], lnArray[i], grd[i]));
        }

        //print the unsorted sg contents just by using toString() method (see the sample output)
        System.out.println("\nThe Unsorted Array: ");
        for (int i = 0; i < sg.size(); i++) {
            System.out.println(sg.elementAt(i).toString());
        }

        //sort sg using Collectionsâ€™ sort method and that will sort the list based on the grade
        Collections.sort(sg);

        //print the sorted content by using toString() method (see the sample output)
        System.out.println("\nSorted by grades: ");
        for (int i = 0; i < sg.size(); i++) {
            System.out.println(sg.elementAt(i).toString());
        }

        //Create an array of StudentGrade type with a length of fnArray
        StudentGrade [] sgArray = new StudentGrade[fnArray.length];

        //with the help of Vectors copyInto() method, copy sg to StudentGrade array you just created above
        sg.copyInto(sgArray);

        //sort sg using insertion sort
        insertionSort(sgArray, 1);

        //print the sorted array (see the sample output)
        System.out.println("\nSorted by first names: ");
        for (int i = 0; i < sgArray.length; i++) {
            System.out.println(sgArray[i].toString());
        }

        // Call your sort method again with the argument of StudentGrade array (you created above) and key 2.
        insertionSort(sgArray, 2);

        //print the sorted array (see the sample output)
        System.out.println("\nSorted by last names: ");
        for (int i = 0; i < sgArray.length; i++) {
            System.out.println(sgArray[i].toString());
        }

        // footer method
        footer();
    }



    // insertion sort that will accept a StudentGrade array and an integer key
    // The key in the method header will decide whether you would like to
    // sort the StudentGrade array according to the first name (key = 1) or the last name (key = 2). Once
    // done, come back to this place inside the driver and call your sort method with the argument of
    // StudentGrade array (you created above) and key = 1 (first names).

    public static  < T extends Comparable <? super T >> void insertionSort(StudentGrade[] a, Integer key){
        if(key.equals(1)) {
            for (int i = 0; i < a.length; i++) {
                while((i>0) && a[i-1].getFirstName().compareTo(a[i].getFirstName())>0){
                    StudentGrade temp = a[i];
                    a[i] = a[i-1];
                    a[i-1] = temp;
                    i--;
                }
            }
        }
        else if (key.equals(2)){
            for (int i = 0; i < a.length; i++) {
                while((i>0) && a[i-1].getLastName().compareTo(a[i].getLastName())>0){
                    StudentGrade temp = a[i];
                    a[i] = a[i-1];
                    a[i-1] = temp;
                    i--;
                }
            }
        }
    }
}
